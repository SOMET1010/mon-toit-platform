name: Mon Toit CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  # Analyse de s√©curit√©
  security-scan:
    name: üîí Analyse de S√©curit√©
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
      
      - name: Check for vulnerable dependencies
        run: |
          npm audit --json > audit-report.json || true
          if [ -s audit-report.json ]; then
            echo "‚ö†Ô∏è Security vulnerabilities detected"
            cat audit-report.json
          fi

  # Analyse de code
  code-analysis:
    name: üîç Analyse de Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check for code duplication
        run: npx jscpd --min-lines 10 --min-tokens 50 src/ || true

  # Tests unitaires et d'int√©gration
  test-unit-integration:
    name: üß™ Tests Unitaires & Int√©gration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Tests E2E
  test-e2e:
    name: üé≠ Tests E2E
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Analyse de performance et bundle
  performance-analysis:
    name: ‚ö° Analyse de Performance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Run bundle analysis
        run: npm run bundle:analyze
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: dist/stats.html
      
      - name: Check bundle size
        run: |
          BUILD_SIZE=$(du -s dist | cut -f1)
          MAX_SIZE=50000  # 50MB max
          
          if [ "$BUILD_SIZE" -gt "$MAX_SIZE" ]; then
            echo "‚ùå Bundle size ($BUILD_SIZE KB) exceeds maximum ($MAX_SIZE KB)"
            exit 1
          else
            echo "‚úÖ Bundle size ($BUILD_SIZE KB) is within acceptable limits"
          fi
      
      - name: Run performance script
        run: |
          chmod +x scripts/bundle-analyzer.sh
          ./scripts/bundle-analyzer.sh --dry-run

  # Tests de s√©curit√© mobile
  mobile-security:
    name: üì± Tests de S√©curit√© Mobile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check Capacitor configuration
        run: |
          echo "üîç V√©rification de la configuration Capacitor..."
          if grep -q "cleartext: false" capacitor.config.ts; then
            echo "‚úÖ HTTPS obligatoire configur√©"
          else
            echo "‚ö†Ô∏è HTTPS non configur√© correctement"
          fi
      
      - name: Validate package.json versions
        run: |
          echo "üîç V√©rification des versions Capacitor..."
          
          # Extraire toutes les versions Capacitor
          CAP_VERSIONS=$(grep -o '"@capacitor/[^"]*": "[^"]*"' package.json | sort)
          
          # V√©rifier l'alignement des versions
          CORE_VERSION=$(grep '"@capacitor/core":' package.json | grep -o '[0-9.]*')
          ANDROID_VERSION=$(grep '"@capacitor/android":' package.json | grep -o '[0-9.]*')
          IOS_VERSION=$(grep '"@capacitor/ios":' package.json | grep -o '[0-9.]*')
          
          if [ "$CORE_VERSION" = "$ANDROID_VERSION" ] && [ "$CORE_VERSION" = "$IOS_VERSION" ]; then
            echo "‚úÖ Versions Capacitor align√©es: $CORE_VERSION"
          else
            echo "‚ùå Versions Capacitor non align√©es:"
            echo "   Core: $CORE_VERSION"
            echo "   Android: $ANDROID_VERSION"
            echo "   iOS: $IOS_VERSION"
            exit 1
          fi
      
      - name: Test mobile build
        run: |
          echo "üî® Test de compilation mobile..."
          npm run build:dev
          npx cap sync
          
          # V√©rifier que les dossiers mobiles existent
          if [ -d "android/app" ] && [ -d "ios/App" ]; then
            echo "‚úÖ Projets mobiles g√©n√©r√©s avec succ√®s"
          else
            echo "‚ùå √âchec de g√©n√©ration des projets mobiles"
            exit 1
          fi

  # Build et d√©ploiement
  build-deploy:
    name: üöÄ Build & D√©ploiement
    runs-on: ubuntu-latest
    needs: [security-scan, code-analysis, test-unit-integration, test-e2e, performance-analysis, mobile-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7
      
      - name: Deploy to Netlify
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1

  # D√©ploiement mobile
  mobile-deploy:
    name: üì± D√©ploiement Mobile
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        platform: [android, ios]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build and sync for ${{ matrix.platform }}
        run: |
          npm run build:mobile
          if [ "${{ matrix.platform }}" = "android" ]; then
            cd android && ./gradlew assembleRelease
          fi
      
      - name: Upload mobile artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            ${{ matrix.platform === 'android' && 'android/app/build/outputs/apk/release/app-release.apk' || '' }}
            ios/App/build/
          retention-days: 30

  # Notification de fin
  notify-complete:
    name: üì¢ Notification
    runs-on: ubuntu-latest
    needs: [build-deploy, mobile-deploy]
    if: always()
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.build-deploy.result }}" = "success" ]; then
            echo "üéâ Build et d√©ploiement r√©ussis!"
          else
            echo "‚ùå √âchec du build ou d√©ploiement"
          fi