{"version":3,"file":"LocationPicker-C-a9Wq3S.js","sources":["../../src/components/property/form/PropertyFormSchema.ts","../../src/hooks/usePropertyForm.ts","../../src/hooks/useMediaUpload.ts","../../src/components/property/MediaUploader.tsx","../../src/components/property/form/PropertyBasicInfo.tsx","../../src/components/property/form/PropertyLocation.tsx","../../src/components/property/form/PropertyCharacteristicsForm.tsx","../../src/components/property/form/PropertyPricing.tsx","../../src/components/property/form/PropertyWorkStatus.tsx","../../src/components/property/LocationPicker.tsx"],"sourcesContent":["import { z } from \"zod\";\nimport { VALIDATION_LIMITS, PROPERTY_LIMITS } from \"@/constants\";\n\nexport const propertySchema = z.object({\n  title: z.string()\n    .min(VALIDATION_LIMITS.MIN_TITLE_LENGTH, `Le titre doit contenir au moins ${VALIDATION_LIMITS.MIN_TITLE_LENGTH} caractères`)\n    .max(VALIDATION_LIMITS.MAX_TITLE_LENGTH, `Le titre ne doit pas dépasser ${VALIDATION_LIMITS.MAX_TITLE_LENGTH} caractères`),\n  description: z.string()\n    .min(VALIDATION_LIMITS.MIN_DESCRIPTION_LENGTH, `La description doit contenir au moins ${VALIDATION_LIMITS.MIN_DESCRIPTION_LENGTH} caractères`)\n    .max(VALIDATION_LIMITS.MAX_DESCRIPTION_LENGTH, `La description ne doit pas dépasser ${VALIDATION_LIMITS.MAX_DESCRIPTION_LENGTH} caractères`),\n  property_type: z.string().min(1, \"Le type de bien est requis\"),\n  address: z.string()\n    .min(VALIDATION_LIMITS.MIN_ADDRESS_LENGTH, `L'adresse doit contenir au moins ${VALIDATION_LIMITS.MIN_ADDRESS_LENGTH} caractères`)\n    .max(VALIDATION_LIMITS.MAX_ADDRESS_LENGTH, `L'adresse ne doit pas dépasser ${VALIDATION_LIMITS.MAX_ADDRESS_LENGTH} caractères`),\n  city: z.string().min(1, \"La ville est requise\"),\n  bedrooms: z.coerce.number()\n    .min(PROPERTY_LIMITS.MIN_BEDROOMS, `Minimum ${PROPERTY_LIMITS.MIN_BEDROOMS} chambre`)\n    .max(PROPERTY_LIMITS.MAX_BEDROOMS, `Maximum ${PROPERTY_LIMITS.MAX_BEDROOMS} chambres`),\n  bathrooms: z.coerce.number()\n    .min(PROPERTY_LIMITS.MIN_BATHROOMS, `Minimum ${PROPERTY_LIMITS.MIN_BATHROOMS} salle de bain`)\n    .max(PROPERTY_LIMITS.MAX_BATHROOMS, `Maximum ${PROPERTY_LIMITS.MAX_BATHROOMS} salles de bain`),\n  surface_area: z.coerce.number()\n    .min(PROPERTY_LIMITS.MIN_SURFACE, `Minimum ${PROPERTY_LIMITS.MIN_SURFACE}m²`)\n    .max(PROPERTY_LIMITS.MAX_SURFACE, `Maximum ${PROPERTY_LIMITS.MAX_SURFACE}m²`),\n  monthly_rent: z.coerce.number()\n    .min(PROPERTY_LIMITS.MIN_RENT, `Minimum ${PROPERTY_LIMITS.MIN_RENT} FCFA`)\n    .max(PROPERTY_LIMITS.MAX_RENT, `Maximum ${PROPERTY_LIMITS.MAX_RENT} FCFA`),\n  deposit_amount: z.coerce.number()\n    .min(1, \"La caution est obligatoire et doit être supérieure à 0 FCFA\"),\n  is_furnished: z.boolean().default(false),\n  has_ac: z.boolean().default(false),\n  has_parking: z.boolean().default(false),\n  has_garden: z.boolean().default(false),\n  work_status: z.enum([\"aucun_travail\", \"travaux_a_effectuer\"]).default(\"aucun_travail\"),\n  work_description: z.string().optional(),\n  work_images: z.array(z.string()).optional().default([]),\n  work_estimated_cost: z.number().nullable().optional(),\n  work_estimated_duration: z.string().nullable().optional(),\n  work_start_date: z.string().nullable().optional(),\n  title_deed_url: z.string().optional(),\n});\n\nexport type PropertyFormData = z.infer<typeof propertySchema>;\n","import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '@/lib/supabase';\nimport { ERROR_MESSAGES } from '@/constants';\nimport { propertySchema, type PropertyFormData } from '@/components/property/form/PropertyFormSchema';\nimport { usePropertyPermissions } from './usePropertyPermissions';\nimport { AppError, handleError, handleSuccess } from '@/lib/errorHandler';\nimport { logger } from '@/services/logger';\nimport type { MediaUrls } from './useMediaUpload';\n\n/**\n * Hook for managing property form state and submission\n * Handles both creation and update of properties\n */\nexport const usePropertyForm = (propertyId?: string) => {\n  const [loading, setLoading] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const navigate = useNavigate();\n  const { user, profile } = usePropertyPermissions();\n\n  const form = useForm<PropertyFormData>({\n    resolver: zodResolver(propertySchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      property_type: '',\n      address: '',\n      city: '',\n      bedrooms: 0,\n      bathrooms: 0,\n      surface_area: 0,\n      is_furnished: false,\n      has_ac: false,\n      has_parking: false,\n      has_garden: false,\n      monthly_rent: 0,\n      deposit_amount: 0,\n    },\n  });\n\n  /**\n   * Load existing property data (for edit mode)\n   */\n  const loadProperty = async (): Promise<void> => {\n    if (!propertyId) return;\n\n    setLoading(true);\n    try {\n      const { data: property, error } = await supabase\n        .from('properties')\n        .select('*')\n        .eq('id', propertyId)\n        .single();\n\n      if (error || !property) {\n        logger.error('Failed to load property', { error, propertyId });\n        handleError(new AppError('PROPERTY_LOAD_FAILED'));\n        navigate('/mes-biens');\n        return;\n      }\n\n      // Populate form with existing data\n      form.reset({\n        title: property.title,\n        description: property.description || '',\n        property_type: property.property_type,\n        address: property.address,\n        city: property.city,\n        bedrooms: property.bedrooms || 1,\n        bathrooms: property.bathrooms || 1,\n        surface_area: property.surface_area || 50,\n        is_furnished: property.is_furnished || false,\n        has_ac: property.has_ac || false,\n        has_parking: property.has_parking || false,\n        has_garden: property.has_garden || false,\n        monthly_rent: property.monthly_rent,\n        deposit_amount: property.deposit_amount || 0,\n      });\n\n      logger.info('Property loaded successfully', { propertyId });\n    } catch (error) {\n      handleError(error, ERROR_MESSAGES.PROPERTY_LOAD_FAILED);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Geocode address to get coordinates\n   */\n  const geocodeAddress = async (\n    address: string,\n    city: string\n  ): Promise<{ latitude: number; longitude: number } | null> => {\n    try {\n      const { data, error } = await supabase.functions.invoke('geocode-address', {\n        body: { address, city },\n      });\n\n      if (error || !data) {\n        logger.error('Geocoding failed', { error, address, city });\n        handleError(new AppError('GEOCODING_FAILED'));\n        return null;\n      }\n\n      return data;\n    } catch (error) {\n      logger.error('Geocode error', { error, address, city });\n      return null;\n    }\n  };\n\n  /**\n   * Submit property (create or update)\n   */\n  const submitProperty = async (\n    data: PropertyFormData,\n    mediaUrls: MediaUrls,\n    overridePropertyId?: string,\n    manualCoords?: { lat: number; lng: number } | null\n  ): Promise<string> => {\n    if (!user || !profile) {\n      throw new AppError('AUTH_REQUIRED');\n    }\n\n    setSubmitting(true);\n\n    try {\n      // Use manual coordinates if provided, otherwise geocode\n      let coords = manualCoords ? { latitude: manualCoords.lat, longitude: manualCoords.lng } : null;\n      \n      if (!coords) {\n        coords = await geocodeAddress(data.address, data.city);\n      }\n\n      const propertyData: any = {\n        title: data.title,\n        description: data.description,\n        property_type: data.property_type,\n        address: data.address,\n        city: data.city,\n        bedrooms: data.bedrooms,\n        bathrooms: data.bathrooms,\n        surface_area: data.surface_area,\n        is_furnished: data.is_furnished,\n        has_ac: data.has_ac,\n        has_parking: data.has_parking,\n        has_garden: data.has_garden,\n        monthly_rent: data.monthly_rent,\n        deposit_amount: data.deposit_amount,\n        owner_id: user.id,\n        latitude: coords?.latitude || null,\n        longitude: coords?.longitude || null,\n        images: mediaUrls.images,\n        main_image: mediaUrls.mainImage,\n        video_url: mediaUrls.videoUrl,\n        panoramic_images: mediaUrls.panoramas,\n        floor_plans: mediaUrls.floorPlans,\n      };\n\n      const targetId = overridePropertyId || propertyId;\n\n      if (targetId) {\n        // Update existing property\n        const { error } = await supabase\n          .from('properties')\n          .update(propertyData)\n          .eq('id', targetId);\n\n        if (error) {\n          logger.error('Failed to update property', { error, targetId });\n          throw new AppError('PROPERTY_UPDATE_FAILED');\n        }\n\n        handleSuccess('PROPERTY_UPDATED');\n        return targetId;\n      } else {\n        // Create new property\n        const { data: newProperty, error } = await supabase\n          .from('properties')\n          .insert([propertyData])\n          .select('id')\n          .single();\n\n        if (error) {\n          logger.error('Failed to create property', { error, propertyData });\n          \n          // Identifier le champ manquant ou problématique\n          let specificError = 'Échec de la création de la propriété';\n          \n          if (error.message?.includes('null value')) {\n            const field = error.message.match(/column \"(\\w+)\"/)?.[1];\n            specificError = field \n              ? `Le champ \"${field}\" est requis mais n'a pas été fourni.`\n              : 'Un champ requis n\\'a pas été fourni.';\n          } else if (error.message?.includes('violates')) {\n            specificError = 'Les données fournies ne respectent pas les contraintes de validation.';\n          } else if (error.message) {\n            specificError = error.message;\n          }\n          \n          throw new Error(specificError);\n        }\n\n        if (!newProperty) {\n          throw new Error('La propriété a été créée mais aucune donnée n\\'a été retournée.');\n        }\n\n        handleSuccess('PROPERTY_CREATED');\n        return newProperty.id;\n      }\n    } catch (error) {\n      // Améliorer les messages d'erreur selon le type d'erreur\n      const errorMessage = error instanceof Error \n        ? error.message \n        : (propertyId ? ERROR_MESSAGES.PROPERTY_UPDATE_FAILED : ERROR_MESSAGES.PROPERTY_CREATE_FAILED);\n      \n      handleError(error, errorMessage);\n      throw error;\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // Load property data on mount if in edit mode\n  useEffect(() => {\n    if (propertyId) {\n      loadProperty();\n    }\n  }, [propertyId]);\n\n  return {\n    form,\n    loading,\n    submitting,\n    loadProperty,\n    submitProperty,\n  };\n};\n","import { useState } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { FILE_LIMITS, ERROR_MESSAGES, validateImageType, validateVideoType } from '@/constants';\nimport { AppError, handleError, handleSuccess } from '@/lib/errorHandler';\nimport { logger } from '@/services/logger';\n\nexport interface MediaFiles {\n  images: File[];\n  video: File | null;\n  panoramas: File[];\n  floorPlans: File[];\n  virtualTourUrl: string;\n}\n\nexport interface MediaUrls {\n  images: string[];\n  mainImage: string | null;\n  videoUrl: string | null;\n  panoramas: { url: string; title: string }[];\n  floorPlans: { url: string; title: string }[];\n}\n\n/**\n * Hook for managing media uploads to Supabase Storage\n * Handles images, videos, panoramas, and floor plans\n */\nexport const useMediaUpload = () => {\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  /**\n   * Validate media files before upload\n   */\n  const validateMediaFiles = (files: MediaFiles): { valid: boolean; errors: string[] } => {\n    const errors: string[] = [];\n\n    // At least one image is required\n    if (files.images.length === 0) {\n      errors.push(ERROR_MESSAGES.FILE_REQUIRED);\n    }\n\n    // Validate image count\n    if (files.images.length > FILE_LIMITS.MAX_IMAGES_PER_PROPERTY) {\n      errors.push(`Maximum ${FILE_LIMITS.MAX_IMAGES_PER_PROPERTY} images autorisées`);\n    }\n\n    // Validate image sizes and types\n    files.images.forEach((img, idx) => {\n      if (img.size > FILE_LIMITS.MAX_IMAGE_SIZE) {\n        errors.push(`Image ${idx + 1}: ${ERROR_MESSAGES.IMAGE_TOO_LARGE}`);\n      }\n      if (!validateImageType(img)) {\n        errors.push(`Image ${idx + 1}: Format non autorisé (JPG, PNG, WEBP uniquement)`);\n      }\n    });\n\n    // Validate video\n    if (files.video) {\n      if (files.video.size > FILE_LIMITS.MAX_VIDEO_SIZE) {\n        errors.push(ERROR_MESSAGES.VIDEO_TOO_LARGE);\n      }\n      if (!validateVideoType(files.video)) {\n        errors.push('Format vidéo non autorisé (MP4, WEBM uniquement)');\n      }\n    }\n\n    // Validate panoramas\n    if (files.panoramas.length > FILE_LIMITS.MAX_PANORAMAS_PER_PROPERTY) {\n      errors.push(`Maximum ${FILE_LIMITS.MAX_PANORAMAS_PER_PROPERTY} panoramas autorisés`);\n    }\n    files.panoramas.forEach((pano, idx) => {\n      if (pano.size > FILE_LIMITS.MAX_PANORAMA_SIZE) {\n        errors.push(`Panorama ${idx + 1}: Taille maximale 8MB`);\n      }\n    });\n\n    // Validate floor plans\n    if (files.floorPlans.length > FILE_LIMITS.MAX_FLOOR_PLANS_PER_PROPERTY) {\n      errors.push(`Maximum ${FILE_LIMITS.MAX_FLOOR_PLANS_PER_PROPERTY} plans autorisés`);\n    }\n    files.floorPlans.forEach((plan, idx) => {\n      if (plan.size > FILE_LIMITS.MAX_FLOOR_PLAN_SIZE) {\n        errors.push(`Plan ${idx + 1}: Taille maximale 5MB`);\n      }\n    });\n\n    return { valid: errors.length === 0, errors };\n  };\n\n  /**\n   * Upload a single file to a specific bucket\n   */\n  const uploadFile = async (\n    bucket: string,\n    path: string,\n    file: File\n  ): Promise<string | null> => {\n    try {\n      const { data, error } = await supabase.storage\n        .from(bucket)\n        .upload(path, file, { upsert: true });\n\n      if (error) {\n        logger.error(`Failed to upload to ${bucket}`, { error, path });\n        throw new AppError('UPLOAD_FAILED');\n      }\n\n      const { data: { publicUrl } } = supabase.storage\n        .from(bucket)\n        .getPublicUrl(data.path);\n\n      return publicUrl;\n    } catch (error) {\n      logger.error('Upload file error', { error, bucket, path });\n      return null;\n    }\n  };\n\n  /**\n   * Upload all media for a property\n   */\n  const uploadMedia = async (\n    propertyId: string,\n    files: MediaFiles,\n    existingMedia?: MediaUrls\n  ): Promise<MediaUrls> => {\n    setUploading(true);\n    setProgress(0);\n\n    try {\n      const totalFiles = \n        files.images.length + \n        (files.video ? 1 : 0) + \n        files.panoramas.length + \n        files.floorPlans.length;\n      \n      let uploadedCount = 0;\n\n      // Upload images\n      const imageUrls: string[] = existingMedia?.images || [];\n      for (const image of files.images) {\n        const timestamp = Date.now();\n        const path = `${propertyId}/${timestamp}_${image.name}`;\n        const url = await uploadFile('property-images', path, image);\n        if (url) imageUrls.push(url);\n        uploadedCount++;\n        setProgress(Math.round((uploadedCount / totalFiles) * 100));\n      }\n\n      // Upload video\n      let videoUrl = existingMedia?.videoUrl || null;\n      if (files.video) {\n        const timestamp = Date.now();\n        const path = `${propertyId}/${timestamp}_${files.video.name}`;\n        const url = await uploadFile('property-videos', path, files.video);\n        if (url) videoUrl = url;\n        uploadedCount++;\n        setProgress(Math.round((uploadedCount / totalFiles) * 100));\n      }\n\n      // Upload panoramas\n      const panoramaUrls: { url: string; title: string }[] = existingMedia?.panoramas || [];\n      for (const panorama of files.panoramas) {\n        const timestamp = Date.now();\n        const path = `${propertyId}/${timestamp}_${panorama.name}`;\n        const url = await uploadFile('property-360', path, panorama);\n        if (url) {\n          panoramaUrls.push({\n            url,\n            title: panorama.name.replace(/\\.[^/.]+$/, '')\n          });\n        }\n        uploadedCount++;\n        setProgress(Math.round((uploadedCount / totalFiles) * 100));\n      }\n\n      // Upload floor plans\n      const floorPlanUrls: { url: string; title: string }[] = existingMedia?.floorPlans || [];\n      for (const plan of files.floorPlans) {\n        const timestamp = Date.now();\n        const path = `${propertyId}/${timestamp}_${plan.name}`;\n        const url = await uploadFile('property-plans', path, plan);\n        if (url) {\n          floorPlanUrls.push({\n            url,\n            title: plan.name.replace(/\\.[^/.]+$/, '')\n          });\n        }\n        uploadedCount++;\n        setProgress(Math.round((uploadedCount / totalFiles) * 100));\n      }\n\n      handleSuccess('MEDIA_UPLOADED');\n\n    return {\n      images: imageUrls,\n      mainImage: imageUrls.length > 0 ? imageUrls[0] : (existingMedia?.mainImage || null),\n      videoUrl,\n      panoramas: panoramaUrls,\n      floorPlans: floorPlanUrls,\n    };\n    } catch (error) {\n      handleError(error, ERROR_MESSAGES.UPLOAD_FAILED);\n      throw error;\n    } finally {\n      setUploading(false);\n      setProgress(0);\n    }\n  };\n\n  /**\n   * Delete media from storage\n   */\n  const deleteMedia = async (urls: MediaUrls): Promise<void> => {\n    try {\n      const extractPath = (url: string) => {\n        const urlObj = new URL(url);\n        const pathParts = urlObj.pathname.split('/');\n        return pathParts.slice(pathParts.indexOf('object') + 2).join('/');\n      };\n\n      // Delete images\n      if (urls.images.length > 0) {\n        const paths = urls.images.map(extractPath);\n        await supabase.storage.from('property-images').remove(paths);\n      }\n\n      // Delete video\n      if (urls.videoUrl) {\n        const path = extractPath(urls.videoUrl);\n        await supabase.storage.from('property-videos').remove([path]);\n      }\n\n      // Delete panoramas\n      if (urls.panoramas.length > 0) {\n        const paths = urls.panoramas.map(p => extractPath(p.url));\n        await supabase.storage.from('property-360').remove(paths);\n      }\n\n      // Delete floor plans\n      if (urls.floorPlans.length > 0) {\n        const paths = urls.floorPlans.map(p => extractPath(p.url));\n        await supabase.storage.from('property-plans').remove(paths);\n      }\n\n      logger.info('Media deleted successfully');\n    } catch (error) {\n      logger.error('Failed to delete media', { error });\n      throw error;\n    }\n  };\n\n  return {\n    uploading,\n    progress,\n    uploadMedia,\n    deleteMedia,\n    validateMediaFiles,\n  };\n};\n","import { useState } from \"react\";\nimport { Upload, X, Video, Globe, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { toast } from \"sonner\";\nimport { FILE_LIMITS, ERROR_MESSAGES } from \"@/constants\";\n\ninterface MediaUploaderProps {\n  propertyId?: string;\n  onImagesChange: (files: File[]) => void;\n  onVideoChange: (file: File | null) => void;\n  onPanoramaChange?: (files: File[]) => void;\n  onFloorPlanChange?: (files: File[]) => void;\n  onVirtualTourUrlChange: (url: string) => void;\n  existingImages?: string[];\n  existingVideo?: string | null;\n  existingPanoramas?: { url: string; title: string }[];\n  existingFloorPlans?: { url: string; title: string }[];\n  existingVirtualTourUrl?: string;\n  uploading?: boolean;\n}\n\nexport const MediaUploader = ({\n  onImagesChange,\n  onVideoChange,\n  onPanoramaChange,\n  onFloorPlanChange,\n  onVirtualTourUrlChange,\n  existingImages = [],\n  existingVideo = null,\n  existingPanoramas = [],\n  existingFloorPlans = [],\n  existingVirtualTourUrl = \"\",\n  uploading = false,\n}: MediaUploaderProps) => {\n  const [imagePreviews, setImagePreviews] = useState<string[]>(existingImages);\n  const [videoPreview, setVideoPreview] = useState<string | null>(existingVideo);\n  const [panoramaPreviews, setPanoramaPreviews] = useState<string[]>([]);\n  const [planPreviews, setPlanPreviews] = useState<string[]>([]);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [virtualTour, setVirtualTour] = useState(existingVirtualTourUrl);\n\n  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length + imagePreviews.length > FILE_LIMITS.MAX_IMAGES_PER_PROPERTY) {\n      toast.error(`Maximum ${FILE_LIMITS.MAX_IMAGES_PER_PROPERTY} images autorisées`);\n      return;\n    }\n\n    const oversizedFiles = files.filter(f => f.size > FILE_LIMITS.MAX_IMAGE_SIZE);\n    if (oversizedFiles.length > 0) {\n      toast.error(ERROR_MESSAGES.IMAGE_TOO_LARGE);\n      return;\n    }\n\n    const newPreviews = files.map((file) => URL.createObjectURL(file));\n    setImagePreviews([...imagePreviews, ...newPreviews]);\n    onImagesChange(files);\n  };\n\n  const handleVideoSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    if (file.size > FILE_LIMITS.MAX_VIDEO_SIZE) {\n      toast.error(ERROR_MESSAGES.VIDEO_TOO_LARGE);\n      return;\n    }\n\n    const validFormats = [\"video/mp4\", \"video/webm\", \"video/quicktime\"];\n    if (!validFormats.includes(file.type)) {\n      toast.error(\"Format vidéo non supporté (mp4, webm, mov uniquement)\");\n      return;\n    }\n\n    setVideoPreview(URL.createObjectURL(file));\n    onVideoChange(file);\n  };\n\n  const handlePanoramaSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    \n    // Check for 2:1 aspect ratio (equirectangular)\n    files.forEach((file) => {\n      const img = new Image();\n      img.onload = () => {\n        const ratio = img.width / img.height;\n        if (Math.abs(ratio - 2) > 0.1) {\n          toast.warning(\n            `${file.name} n'a pas le bon ratio (2:1 requis pour les images 360°)`\n          );\n        }\n      };\n      img.src = URL.createObjectURL(file);\n    });\n\n    const newPreviews = files.map((file) => URL.createObjectURL(file));\n    setPanoramaPreviews([...panoramaPreviews, ...newPreviews]);\n    onPanoramaChange(files);\n  };\n\n  const handleFloorPlanSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const newPreviews = files.map((file) => URL.createObjectURL(file));\n    setPlanPreviews([...planPreviews, ...newPreviews]);\n    onFloorPlanChange(files);\n  };\n\n  const removeImage = (index: number) => {\n    const newPreviews = imagePreviews.filter((_, i) => i !== index);\n    setImagePreviews(newPreviews);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Regular images */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <Label htmlFor=\"images\" className=\"text-base font-semibold\">\n            Photos du bien\n          </Label>\n          <span className=\"text-xs text-muted-foreground\">\n            {imagePreviews.length}/10 • JPG, PNG • Max 5MB/photo\n          </span>\n        </div>\n        <div className=\"grid grid-cols-4 gap-3\">\n          {imagePreviews.map((preview, index) => (\n            <div key={index} className=\"relative aspect-video group\">\n              <img\n                src={preview}\n                alt={`Preview ${index + 1}`}\n                loading=\"lazy\"\n                decoding=\"async\"\n                className=\"w-full h-full object-cover rounded-md border-2 border-border\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                onClick={() => removeImage(index)}\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n              <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/50 to-transparent p-2 opacity-0 group-hover:opacity-100 transition-opacity rounded-b-md\">\n                <p className=\"text-xs text-white font-medium\">Photo {index + 1}</p>\n              </div>\n            </div>\n          ))}\n          {imagePreviews.length < 10 && (\n            <label className=\"aspect-video border-2 border-dashed border-muted-foreground/25 rounded-md flex flex-col items-center justify-center cursor-pointer hover:border-primary hover:bg-primary/5 transition-all group\">\n              <input\n                type=\"file\"\n                accept=\"image/jpeg,image/png,image/webp\"\n                multiple\n                onChange={handleImageSelect}\n                className=\"hidden\"\n              />\n              <Upload className=\"h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors mb-1\" />\n              <span className=\"text-xs text-muted-foreground group-hover:text-primary transition-colors\">Ajouter</span>\n            </label>\n          )}\n        </div>\n      </div>\n\n      {/* Video upload */}\n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <Label htmlFor=\"video\" className=\"text-base font-semibold flex items-center gap-2\">\n            <Video className=\"h-5 w-5\" />\n            Vidéo de présentation\n          </Label>\n          <span className=\"text-xs text-muted-foreground\">\n            MP4, WebM, MOV • Max 100MB\n          </span>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          {videoPreview ? (\n            <div className=\"relative flex-1\">\n              <video \n                src={videoPreview} \n                controls \n                className=\"w-full rounded-md border-2 border-border\" \n              />\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                size=\"sm\"\n                className=\"absolute top-2 right-2\"\n                onClick={() => {\n                  setVideoPreview(null);\n                  onVideoChange(null);\n                }}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ) : (\n            <label className=\"flex-1 border-2 border-dashed border-muted-foreground/25 rounded-md p-8 text-center cursor-pointer hover:border-primary hover:bg-primary/5 transition-all group\">\n              <input\n                type=\"file\"\n                accept=\"video/mp4,video/webm,video/quicktime\"\n                onChange={handleVideoSelect}\n                className=\"hidden\"\n              />\n              <Video className=\"h-10 w-10 mx-auto mb-3 text-muted-foreground group-hover:text-primary transition-colors\" />\n              <p className=\"text-sm font-medium text-foreground mb-1\">\n                Ajouter une vidéo\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Formats: MP4, WebM, MOV • Taille max: 100 MB\n              </p>\n            </label>\n          )}\n        </div>\n      </div>\n\n      {/* 360° panorama */}\n      <div className=\"space-y-3\">\n        <Label htmlFor=\"panorama\" className=\"text-base font-semibold flex items-center gap-2\">\n          <Globe className=\"h-5 w-5\" />\n          Images panoramiques 360°\n        </Label>\n        <div className=\"grid grid-cols-3 gap-3\">\n          {panoramaPreviews.map((preview, index) => (\n            <div key={index} className=\"relative aspect-video group\">\n              <img\n                src={preview}\n                alt={`Panorama ${index + 1}`}\n                loading=\"lazy\"\n                decoding=\"async\"\n                className=\"w-full h-full object-cover rounded-md\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                onClick={() => {\n                  const newPreviews = panoramaPreviews.filter((_, i) => i !== index);\n                  setPanoramaPreviews(newPreviews);\n                }}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ))}\n          <label className=\"aspect-video border-2 border-dashed rounded-md flex items-center justify-center cursor-pointer hover:border-primary transition-colors\">\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              multiple\n              onChange={handlePanoramaSelect}\n              className=\"hidden\"\n            />\n            <Globe className=\"h-8 w-8 text-muted-foreground\" />\n          </label>\n        </div>\n        <p className=\"text-xs text-muted-foreground\">\n          Les images doivent avoir un ratio 2:1 (équirectangulaire)\n        </p>\n      </div>\n\n      {/* Floor plans */}\n      <div className=\"space-y-3\">\n        <Label htmlFor=\"plans\" className=\"text-base font-semibold flex items-center gap-2\">\n          <FileText className=\"h-5 w-5\" />\n          Plans d'étage\n        </Label>\n        <div className=\"grid grid-cols-3 gap-3\">\n          {planPreviews.map((preview, index) => (\n            <div key={index} className=\"relative aspect-video group\">\n              <img\n                src={preview}\n                alt={`Plan ${index + 1}`}\n                loading=\"lazy\"\n                decoding=\"async\"\n                className=\"w-full h-full object-cover rounded-md\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                onClick={() => {\n                  const newPreviews = planPreviews.filter((_, i) => i !== index);\n                  setPlanPreviews(newPreviews);\n                }}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          ))}\n          <label className=\"aspect-video border-2 border-dashed rounded-md flex items-center justify-center cursor-pointer hover:border-primary transition-colors\">\n            <input\n              type=\"file\"\n              accept=\"image/*,application/pdf\"\n              multiple\n              onChange={handleFloorPlanSelect}\n              className=\"hidden\"\n            />\n            <FileText className=\"h-8 w-8 text-muted-foreground\" />\n          </label>\n        </div>\n      </div>\n\n      {/* Virtual tour URL */}\n      <div className=\"space-y-3\">\n        <Label htmlFor=\"virtualTour\" className=\"text-base font-semibold\">\n          Lien visite virtuelle (Matterport, etc.)\n        </Label>\n        <Input\n          id=\"virtualTour\"\n          type=\"url\"\n          placeholder=\"https://my.matterport.com/show/...\"\n          value={virtualTour}\n          onChange={(e) => {\n            setVirtualTour(e.target.value);\n            onVirtualTourUrlChange(e.target.value);\n          }}\n        />\n      </div>\n\n      {uploadProgress > 0 && uploadProgress < 100 && (\n        <div className=\"space-y-2\">\n          <Progress value={uploadProgress} />\n          <p className=\"text-sm text-center text-muted-foreground\">\n            Upload en cours... {uploadProgress}%\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { UseFormReturn } from \"react-hook-form\";\nimport { PropertyFormData } from \"./PropertyFormSchema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { PROPERTY_TYPES } from \"@/constants\";\n\ninterface PropertyBasicInfoProps {\n  form: UseFormReturn<PropertyFormData>;\n}\n\nexport const PropertyBasicInfo = ({ form }: PropertyBasicInfoProps) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Informations générales</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Titre de l'annonce</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: Appartement F3 moderne à Cocody\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Décrivez votre bien en détail...\"\n                  className=\"min-h-[120px]\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"property_type\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Type de bien</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionnez un type\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {PROPERTY_TYPES.map((type) => (\n                    <SelectItem key={type} value={type}>\n                      {type}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n","import { UseFormReturn } from \"react-hook-form\";\nimport { PropertyFormData } from \"./PropertyFormSchema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CITIES } from \"@/constants\";\n\ninterface PropertyLocationProps {\n  form: UseFormReturn<PropertyFormData>;\n}\n\nexport const PropertyLocation = ({ form }: PropertyLocationProps) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Localisation</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"city\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Ville</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionnez une ville\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {CITIES.map((city) => (\n                    <SelectItem key={city} value={city}>\n                      {city}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Adresse complète</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ex: Rue des Jardins, près du marché\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n","import { UseFormReturn } from \"react-hook-form\";\nimport { PropertyFormData } from \"./PropertyFormSchema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface PropertyCharacteristicsFormProps {\n  form: UseFormReturn<PropertyFormData>;\n}\n\nexport const PropertyCharacteristicsForm = ({ form }: PropertyCharacteristicsFormProps) => {\n  const propertyType = form.watch(\"property_type\");\n  const isApartment = propertyType === \"Appartement\";\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Caractéristiques</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"bedrooms\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Chambres</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"bathrooms\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Salles de bain</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"surface_area\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Surface (m²)</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" min=\"0\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"space-y-3\">\n          <FormLabel>Équipements</FormLabel>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"is_furnished\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <FormLabel className=\"font-normal cursor-pointer\">Meublé</FormLabel>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"has_ac\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <FormLabel className=\"font-normal cursor-pointer\">Climatisation</FormLabel>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"has_parking\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                  <FormControl>\n                    <Checkbox\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <FormLabel className=\"font-normal cursor-pointer\">Parking</FormLabel>\n                </FormItem>\n              )}\n            />\n\n            {!isApartment && (\n              <FormField\n                control={form.control}\n                name=\"has_garden\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <FormLabel className=\"font-normal cursor-pointer\">Jardin</FormLabel>\n                  </FormItem>\n                )}\n              />\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","import { UseFormReturn } from \"react-hook-form\";\nimport { PropertyFormData } from \"./PropertyFormSchema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface PropertyPricingProps {\n  form: UseFormReturn<PropertyFormData>;\n}\n\nexport const PropertyPricing = ({ form }: PropertyPricingProps) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Tarification</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"monthly_rent\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Loyer mensuel (FCFA)</FormLabel>\n              <FormControl>\n                <Input type=\"number\" min=\"0\" placeholder=\"250000\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"deposit_amount\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Caution (FCFA)</FormLabel>\n              <FormControl>\n                <Input type=\"number\" min=\"0\" placeholder=\"500000\" {...field} />\n              </FormControl>\n              <FormDescription>\n                Généralement équivalent à 2-3 mois de loyer\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n","import { UseFormReturn } from \"react-hook-form\";\nimport { FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from \"@/components/ui/form\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertTriangle, CheckCircle, Upload, X } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface PropertyWorkStatusProps {\n  form: UseFormReturn<any>;\n}\n\nexport const PropertyWorkStatus = ({ form }: PropertyWorkStatusProps) => {\n  const workStatus = form.watch(\"work_status\");\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"h-5 w-5 text-warning\" />\n          État des travaux\n        </CardTitle>\n        <CardDescription>\n          Informez les locataires potentiels de l'état du bien\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"work_status\"\n          render={({ field }) => (\n            <FormItem className=\"space-y-3\">\n              <FormLabel>Travaux nécessaires ?</FormLabel>\n              <FormControl>\n                <RadioGroup\n                  onValueChange={field.onChange}\n                  defaultValue={field.value}\n                  className=\"flex flex-col space-y-2\"\n                >\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"aucun_travail\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal cursor-pointer flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-success\" />\n                      Aucun travail - Logement prêt à occuper\n                    </FormLabel>\n                  </FormItem>\n                  <FormItem className=\"flex items-center space-x-3 space-y-0\">\n                    <FormControl>\n                      <RadioGroupItem value=\"travaux_a_effectuer\" />\n                    </FormControl>\n                    <FormLabel className=\"font-normal cursor-pointer flex items-center gap-2\">\n                      <AlertTriangle className=\"h-4 w-4 text-warning\" />\n                      Travaux à effectuer avant emménagement\n                    </FormLabel>\n                  </FormItem>\n                </RadioGroup>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {workStatus === \"travaux_a_effectuer\" && (\n          <div className=\"space-y-4 pt-4 border-t animate-fade-in\">\n            <FormField\n              control={form.control}\n              name=\"work_description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description des travaux *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Décrivez en détail les travaux à effectuer : peinture, plomberie, électricité, etc.\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Soyez transparent sur la nature et l'ampleur des travaux\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"work_images\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Photos de l'état actuel</FormLabel>\n                  <FormControl>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                        {(field.value || []).map((url: string, index: number) => (\n                          <div key={index} className=\"relative group\">\n                            <img\n                              src={url}\n                              alt={`Travaux ${index + 1}`}\n                              className=\"w-full h-32 object-cover rounded-lg\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"destructive\"\n                              size=\"icon\"\n                              className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                              onClick={() => {\n                                const filtered = (field.value || []).filter((_: string, i: number) => i !== index);\n                                field.onChange(filtered);\n                              }}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      {(field.value || []).length < 5 && (\n                        <div>\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            multiple\n                            onChange={(e) => {\n                              const files = Array.from(e.target.files || []);\n                              // Simuler upload - en production, utiliser un vrai service d'upload\n                              files.forEach((file) => {\n                                const reader = new FileReader();\n                                reader.onload = (event) => {\n                                  const currentImages = field.value || [];\n                                  if (currentImages.length < 5) {\n                                    field.onChange([...currentImages, event.target?.result as string]);\n                                  }\n                                };\n                                reader.readAsDataURL(file);\n                              });\n                            }}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormDescription>\n                    Photos montrant les zones nécessitant des travaux (maximum 5 photos)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Estimations optionnelles */}\n            <div className=\"bg-muted/50 p-4 rounded-lg space-y-4 mt-4\">\n              <h4 className=\"font-semibold text-sm\">Estimations (optionnel)</h4>\n              \n              <FormField\n                control={form.control}\n                name=\"work_estimated_cost\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Coût estimé (FCFA)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ex: 500000\"\n                        {...field}\n                        value={field.value || ''}\n                        onChange={(e) => field.onChange(e.target.value ? parseFloat(e.target.value) : null)}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Estimation du coût total des travaux\n                    </FormDescription>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"work_estimated_duration\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Durée estimée</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ex: 2 semaines, 1 mois\" \n                        {...field}\n                        value={field.value || ''}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Temps nécessaire pour réaliser les travaux\n                    </FormDescription>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"work_start_date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date de début prévue</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field}\n                        value={field.value || ''}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Date prévue pour commencer les travaux\n                    </FormDescription>\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","import { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { MapPin } from 'lucide-react';\n\ninterface LocationPickerProps {\n  onLocationSelect: (latitude: number, longitude: number) => void;\n  initialLat?: number;\n  initialLng?: number;\n  city?: string;\n}\n\nconst CITY_COORDINATES: Record<string, [number, number]> = {\n  'Abidjan': [-4.0083, 5.3600],\n  'Yamoussoukro': [-5.2767, 6.8276],\n  'Bouaké': [-5.0300, 7.6900],\n  'Daloa': [-6.4503, 6.8770],\n  'San-Pédro': [-6.6361, 4.7485],\n  'Korhogo': [-5.6300, 9.4500],\n  'Man': [-7.5542, 7.4125],\n};\n\nexport const LocationPicker = ({ onLocationSelect, initialLat, initialLng, city }: LocationPickerProps) => {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n  const marker = useRef<mapboxgl.Marker | null>(null);\n  const [coordinates, setCoordinates] = useState<[number, number] | null>(\n    initialLat && initialLng ? [initialLng, initialLat] : null\n  );\n\n  useEffect(() => {\n    if (!mapContainer.current) return;\n\n    // Get initial position from city or default to Abidjan\n    const cityCoords = city ? CITY_COORDINATES[city] : null;\n    const initialCoords: [number, number] = \n      coordinates || cityCoords || CITY_COORDINATES['Abidjan'];\n\n    mapboxgl.accessToken = 'pk.eyJ1IjoibG92YWJsZS1kZXYiLCJhIjoiY200N2lwbDJhMDBseTJrcHlnOTluZnN1biJ9.JLechweMLsxP7qlR6cT-Og';\n    \n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/streets-v12',\n      center: initialCoords,\n      zoom: 13,\n    });\n\n    map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');\n\n    // Add initial marker if coordinates exist\n    if (coordinates) {\n      marker.current = new mapboxgl.Marker({ draggable: true, color: '#EF4444' })\n        .setLngLat(coordinates)\n        .addTo(map.current);\n\n      marker.current.on('dragend', () => {\n        const lngLat = marker.current!.getLngLat();\n        setCoordinates([lngLat.lng, lngLat.lat]);\n        onLocationSelect(lngLat.lat, lngLat.lng);\n      });\n    }\n\n    // Click to add/move marker\n    map.current.on('click', (e) => {\n      const lngLat = e.lngLat;\n      \n      if (marker.current) {\n        marker.current.setLngLat(lngLat);\n      } else {\n        marker.current = new mapboxgl.Marker({ draggable: true, color: '#EF4444' })\n          .setLngLat(lngLat)\n          .addTo(map.current!);\n\n        marker.current.on('dragend', () => {\n          const newLngLat = marker.current!.getLngLat();\n          setCoordinates([newLngLat.lng, newLngLat.lat]);\n          onLocationSelect(newLngLat.lat, newLngLat.lng);\n        });\n      }\n\n      setCoordinates([lngLat.lng, lngLat.lat]);\n      onLocationSelect(lngLat.lat, lngLat.lng);\n    });\n\n    return () => {\n      map.current?.remove();\n    };\n  }, [city]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <MapPin className=\"h-5 w-5\" />\n          Position sur la carte\n        </CardTitle>\n        <CardDescription>\n          Cliquez sur la carte pour définir l'emplacement exact de votre bien\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div ref={mapContainer} className=\"h-[400px] rounded-lg\" />\n        {coordinates && (\n          <p className=\"text-sm text-muted-foreground mt-2\">\n            Position : {coordinates[1].toFixed(6)}, {coordinates[0].toFixed(6)}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n"],"names":["propertySchema","z.object","z.string","VALIDATION_LIMITS","z.coerce","PROPERTY_LIMITS","z.boolean","z.enum","z.array","z.number","usePropertyForm","propertyId","loading","setLoading","useState","submitting","setSubmitting","navigate","useNavigate","user","profile","usePropertyPermissions","form","useForm","zodResolver","loadProperty","property","error","supabase","logger","handleError","AppError","ERROR_MESSAGES","geocodeAddress","address","city","data","submitProperty","mediaUrls","overridePropertyId","manualCoords","coords","propertyData","targetId","handleSuccess","newProperty","specificError","_a","field","_b","_c","errorMessage","useEffect","useMediaUpload","uploading","setUploading","progress","setProgress","validateMediaFiles","files","errors","FILE_LIMITS","img","idx","validateImageType","validateVideoType","pano","plan","uploadFile","bucket","path","file","publicUrl","existingMedia","totalFiles","uploadedCount","imageUrls","image","timestamp","url","videoUrl","panoramaUrls","panorama","floorPlanUrls","urls","extractPath","pathParts","paths","p","MediaUploader","onImagesChange","onVideoChange","onPanoramaChange","onFloorPlanChange","onVirtualTourUrlChange","existingImages","existingVideo","existingPanoramas","existingFloorPlans","existingVirtualTourUrl","imagePreviews","setImagePreviews","videoPreview","setVideoPreview","panoramaPreviews","setPanoramaPreviews","planPreviews","setPlanPreviews","uploadProgress","setUploadProgress","virtualTour","setVirtualTour","handleImageSelect","e","toast","f","newPreviews","handleVideoSelect","handlePanoramaSelect","ratio","handleFloorPlanSelect","removeImage","index","_","i","jsxs","jsx","Label","preview","Button","X","Upload","Video","Globe","FileText","Input","Progress","PropertyBasicInfo","Card","CardHeader","CardTitle","CardContent","FormField","FormItem","FormLabel","FormControl","FormMessage","Textarea","Select","SelectTrigger","SelectValue","SelectContent","PROPERTY_TYPES","type","SelectItem","PropertyLocation","CITIES","PropertyCharacteristicsForm","isApartment","Checkbox","PropertyPricing","FormDescription","PropertyWorkStatus","workStatus","AlertTriangle","CardDescription","RadioGroup","RadioGroupItem","CheckCircle","filtered","reader","event","currentImages","CITY_COORDINATES","LocationPicker","onLocationSelect","initialLat","initialLng","mapContainer","useRef","map","marker","coordinates","setCoordinates","cityCoords","initialCoords","mapboxgl","lngLat","newLngLat","MapPin"],"mappings":"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"}