{"version":3,"file":"Messages-_muaW2ep.js","sources":["../../src/components/messaging/MessageTemplates.tsx","../../src/components/messaging/AttachmentUpload.tsx","../../src/pages/Messages.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { toast } from '@/hooks/use-toast';\nimport { FileText, Plus, Trash2, Edit } from 'lucide-react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { logger } from '@/services/logger';\n\ninterface Template {\n  id: string;\n  name: string;\n  content: string;\n}\n\ninterface MessageTemplatesProps {\n  onUseTemplate: (content: string) => void;\n}\n\nconst MessageTemplates = ({ onUseTemplate }: MessageTemplatesProps) => {\n  const { user } = useAuth();\n  const [templates, setTemplates] = useState<Template[]>([]);\n  const [open, setOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<Template | null>(null);\n  const [templateName, setTemplateName] = useState('');\n  const [templateContent, setTemplateContent] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      fetchTemplates();\n    }\n  }, [user]);\n\n  const fetchTemplates = async () => {\n    if (!user) return;\n\n    const { data, error } = await supabase\n      .from('message_templates')\n      .select('*')\n      .eq('user_id', user.id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      logger.logError(error, { context: 'MessageTemplates', action: 'fetch' });\n    } else {\n      setTemplates(data || []);\n    }\n  };\n\n  const saveTemplate = async () => {\n    if (!user || !templateName.trim() || !templateContent.trim()) {\n      toast({\n        title: 'Erreur',\n        description: 'Veuillez remplir tous les champs',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    try {\n      if (editingTemplate) {\n        const { error } = await supabase\n          .from('message_templates')\n          .update({\n            name: templateName,\n            content: templateContent,\n          })\n          .eq('id', editingTemplate.id);\n\n        if (error) throw error;\n\n        toast({\n          title: 'Modèle mis à jour',\n          description: 'Votre modèle a été mis à jour avec succès',\n        });\n      } else {\n        const { error } = await supabase\n          .from('message_templates')\n          .insert({\n            user_id: user.id,\n            name: templateName,\n            content: templateContent,\n          });\n\n        if (error) throw error;\n\n        toast({\n          title: 'Modèle créé',\n          description: 'Votre modèle a été créé avec succès',\n        });\n      }\n\n      fetchTemplates();\n      resetForm();\n      setOpen(false);\n    } catch (error) {\n      logger.logError(error, { context: 'MessageTemplates', action: 'save' });\n      toast({\n        title: 'Erreur',\n        description: 'Impossible de sauvegarder le modèle',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const deleteTemplate = async (id: string) => {\n    const { error } = await supabase\n      .from('message_templates')\n      .delete()\n      .eq('id', id);\n\n    if (error) {\n      toast({\n        title: 'Erreur',\n        description: 'Impossible de supprimer le modèle',\n        variant: 'destructive',\n      });\n    } else {\n      toast({\n        title: 'Modèle supprimé',\n        description: 'Le modèle a été supprimé avec succès',\n      });\n      fetchTemplates();\n    }\n  };\n\n  const resetForm = () => {\n    setTemplateName('');\n    setTemplateContent('');\n    setEditingTemplate(null);\n  };\n\n  const openEditDialog = (template: Template) => {\n    setEditingTemplate(template);\n    setTemplateName(template.name);\n    setTemplateContent(template.content);\n    setOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-sm font-semibold flex items-center gap-2\">\n          <FileText className=\"h-4 w-4\" />\n          Modèles de messages\n        </h3>\n        <Dialog open={open} onOpenChange={(open) => { setOpen(open); if (!open) resetForm(); }}>\n          <DialogTrigger asChild>\n            <Button size=\"sm\" variant=\"outline\">\n              <Plus className=\"h-4 w-4 mr-1\" />\n              Nouveau\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingTemplate ? 'Modifier le modèle' : 'Nouveau modèle'}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Nom du modèle</label>\n                <Input\n                  value={templateName}\n                  onChange={(e) => setTemplateName(e.target.value)}\n                  placeholder=\"Ex: Demande de visite\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Contenu</label>\n                <Textarea\n                  value={templateContent}\n                  onChange={(e) => setTemplateContent(e.target.value)}\n                  placeholder=\"Tapez votre message...\"\n                  rows={5}\n                />\n              </div>\n              <Button onClick={saveTemplate} className=\"w-full\">\n                {editingTemplate ? 'Mettre à jour' : 'Créer'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <ScrollArea className=\"h-40\">\n        {templates.length === 0 ? (\n          <p className=\"text-sm text-muted-foreground text-center py-4\">\n            Aucun modèle enregistré\n          </p>\n        ) : (\n          <div className=\"space-y-2\">\n            {templates.map((template) => (\n              <Card key={template.id} className=\"hover:bg-muted/50 transition-colors\">\n                <CardContent className=\"p-3\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"flex-1 min-w-0\">\n                      <button\n                        onClick={() => onUseTemplate(template.content)}\n                        className=\"text-left w-full\"\n                      >\n                        <p className=\"font-medium text-sm truncate\">{template.name}</p>\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {template.content}\n                        </p>\n                      </button>\n                    </div>\n                    <div className=\"flex gap-1 flex-shrink-0\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => openEditDialog(template)}\n                        className=\"h-7 w-7\"\n                      >\n                        <Edit className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => deleteTemplate(template.id)}\n                        className=\"h-7 w-7 text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </ScrollArea>\n    </div>\n  );\n};\n\nexport default MessageTemplates;\n","import { useState } from 'react';\nimport { supabase } from '@/lib/supabase';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/hooks/use-toast';\nimport { Paperclip, X, FileText, Image as ImageIcon, File } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { logger } from '@/services/logger';\n\ninterface Attachment {\n  name: string;\n  url: string;\n  type: string;\n  size: number;\n}\n\ninterface AttachmentUploadProps {\n  attachments: Attachment[];\n  onAttachmentsChange: (attachments: Attachment[]) => void;\n}\n\nconst AttachmentUpload = ({ attachments, onAttachmentsChange }: AttachmentUploadProps) => {\n  const { user } = useAuth();\n  const [uploading, setUploading] = useState(false);\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    \n    if (files.length + attachments.length > 5) {\n      toast({\n        title: 'Limite atteinte',\n        description: 'Vous ne pouvez ajouter que 5 pièces jointes maximum',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const uploadedFiles: Attachment[] = [];\n\n      for (const file of files) {\n        // Check file size (max 10MB)\n        if (file.size > 10 * 1024 * 1024) {\n          toast({\n            title: 'Fichier trop volumineux',\n            description: `${file.name} dépasse la limite de 10MB`,\n            variant: 'destructive',\n          });\n          continue;\n        }\n\n        const fileExt = file.name.split('.').pop();\n        const fileName = `${user!.id}/${Date.now()}_${Math.random()}.${fileExt}`;\n\n        const { error: uploadError } = await supabase.storage\n          .from('user-documents')\n          .upload(fileName, file);\n\n        if (uploadError) throw uploadError;\n\n        const { data: { publicUrl } } = supabase.storage\n          .from('user-documents')\n          .getPublicUrl(fileName);\n\n        uploadedFiles.push({\n          name: file.name,\n          url: publicUrl,\n          type: file.type,\n          size: file.size,\n        });\n      }\n\n      onAttachmentsChange([...attachments, ...uploadedFiles]);\n      \n      toast({\n        title: 'Fichiers ajoutés',\n        description: `${uploadedFiles.length} fichier(s) ajouté(s) avec succès`,\n      });\n    } catch (error) {\n      logger.logError(error, { context: 'AttachmentUpload', action: 'upload' });\n      toast({\n        title: 'Erreur',\n        description: 'Impossible de télécharger les fichiers',\n        variant: 'destructive',\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const removeAttachment = (index: number) => {\n    onAttachmentsChange(attachments.filter((_, i) => i !== index));\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.startsWith('image/')) return <ImageIcon className=\"h-4 w-4\" />;\n    if (type.includes('pdf')) return <FileText className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return bytes + ' B';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      {attachments.length > 0 && (\n        <div className=\"space-y-2\">\n          {attachments.map((file, index) => (\n            <Card key={index} className=\"p-2\">\n              <div className=\"flex items-center gap-2\">\n                {getFileIcon(file.type)}\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {formatFileSize(file.size)}\n                  </p>\n                </div>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => removeAttachment(index)}\n                  className=\"h-7 w-7\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <div className=\"flex gap-2\">\n        <input\n          type=\"file\"\n          id=\"file-upload\"\n          multiple\n          className=\"hidden\"\n          onChange={handleFileSelect}\n          accept=\"image/*,.pdf,.doc,.docx,.txt\"\n        />\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => document.getElementById('file-upload')?.click()}\n          disabled={uploading || attachments.length >= 5}\n        >\n          <Paperclip className=\"h-4 w-4 mr-1\" />\n          {uploading ? 'Téléchargement...' : 'Joindre fichier'}\n        </Button>\n        {attachments.length > 0 && (\n          <span className=\"text-xs text-muted-foreground self-center\">\n            {attachments.length}/5\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AttachmentUpload;\n","import { useState, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { supabase } from '@/lib/supabase';\nimport { useAuth } from '@/hooks/useAuth';\nimport Navbar from '@/components/Navbar';\nimport Footer from '@/components/Footer';\nimport { DynamicBreadcrumb } from '@/components/navigation/DynamicBreadcrumb';\nimport MessageTemplates from '@/components/messaging/MessageTemplates';\nimport AttachmentUpload from '@/components/messaging/AttachmentUpload';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Send, MessageCircle, Paperclip, Download, FileText, Image as ImageIcon, File } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { logger } from '@/services/logger';\nimport type { Message as MessageType } from '@/types';\nimport { Badge } from '@/components/ui/badge';\n\ninterface Attachment {\n  name: string;\n  url: string;\n  type: string;\n  size: number;\n}\n\ninterface MessageDisplay {\n  id: string;\n  sender_id: string;\n  receiver_id: string;\n  content: string;\n  is_read: boolean;\n  created_at: string;\n  attachments?: Attachment[];\n}\n\ninterface Conversation {\n  id: string;\n  user_id: string;\n  user_name: string;\n  last_message: string;\n  last_message_time: string;\n  unread_count: number;\n  conversation_type: 'prospect' | 'applicant' | 'tenant' | 'landlord_support';\n}\n\ninterface UserProfile {\n  id: string;\n  full_name: string;\n}\n\nconst Messages = () => {\n  const { user } = useAuth();\n  const [searchParams] = useSearchParams();\n  const recipientId = searchParams.get('recipient');\n\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(recipientId);\n  const [messages, setMessages] = useState<MessageDisplay[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [attachments, setAttachments] = useState<Attachment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [profiles, setProfiles] = useState<Record<string, UserProfile>>({});\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const loadingCompleted = useRef(false);\n\n  // Stop loading if user is not connected\n  useEffect(() => {\n    if (!user) {\n      setLoading(false);\n      return;\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (user) {\n      fetchConversations();\n      \n      // Safety timeout: 10 seconds max\n      const timeoutId = setTimeout(() => {\n        if (!loadingCompleted.current) {\n          setLoading(false);\n          toast({\n            title: 'Chargement lent',\n            description: 'Le chargement prend plus de temps que prévu. Vérifiez votre connexion.',\n            variant: 'destructive'\n          });\n        }\n      }, 10000);\n      \n      return () => clearTimeout(timeoutId);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (selectedConversation) {\n      fetchMessages(selectedConversation);\n      markAsRead(selectedConversation);\n    }\n  }, [selectedConversation]);\n\n  // Auto-create conversation if recipientId is provided\n  useEffect(() => {\n    if (user && recipientId && !loading) {\n      const existingConv = conversations.find(c => c.id === recipientId);\n      \n      if (!existingConv && !profiles[recipientId]) {\n        const fetchRecipientProfile = async () => {\n          const { data: profile } = await supabase\n            .from('profiles')\n            .select('id, full_name')\n            .eq('id', recipientId)\n            .maybeSingle();\n          \n          if (profile) {\n            setConversations(prev => [{\n              id: profile.id,\n              user_id: profile.id,\n              user_name: profile.full_name || 'Utilisateur',\n              last_message: '',\n              last_message_time: new Date().toISOString(),\n              unread_count: 0,\n              conversation_type: 'prospect' as const\n            }, ...prev]);\n            \n            setProfiles(prev => ({\n              ...prev,\n              [profile.id]: profile\n            }));\n          }\n        };\n        \n        fetchRecipientProfile();\n      }\n    }\n  }, [recipientId, user, conversations, loading, profiles]);\n\n  // Scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  // Realtime subscription for new messages\n  useEffect(() => {\n    if (!user) return;\n\n    const channel = supabase\n      .channel('messages-realtime')\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: `receiver_id=eq.${user.id}`,\n        },\n        (payload) => {\n          const newMessage = payload.new as MessageType;\n          \n          // Update conversations list\n          fetchConversations();\n          \n          // If message is from selected conversation, refresh messages\n          if (newMessage.sender_id === selectedConversation) {\n            fetchMessages(selectedConversation);\n          }\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: `sender_id=eq.${user.id}`,\n        },\n        (payload) => {\n          const newMessage = payload.new as MessageType;\n          \n          // Update conversations list\n          fetchConversations();\n          \n          // If message is to selected conversation, refresh messages\n          if (newMessage.receiver_id === selectedConversation) {\n            fetchMessages(selectedConversation);\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [user, selectedConversation]);\n\n  const fetchConversations = async () => {\n    if (!user) {\n      setLoading(false); // Important\n      return;\n    }\n\n    try {\n      // Fetch all messages where user is sender or receiver\n      const { data: messagesData, error } = await supabase\n        .from('messages')\n        .select('*')\n        .or(`sender_id.eq.${user.id},receiver_id.eq.${user.id}`)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Group by conversation partner\n      const conversationMap = new Map<string, Conversation>();\n      const userIds = new Set<string>();\n\n      messagesData?.forEach(msg => {\n        const partnerId = msg.sender_id === user.id ? msg.receiver_id : msg.sender_id;\n        userIds.add(partnerId);\n\n        if (!conversationMap.has(partnerId)) {\n          conversationMap.set(partnerId, {\n            id: partnerId,\n            user_id: partnerId,\n            user_name: '',\n            last_message: msg.content,\n            last_message_time: msg.created_at,\n            unread_count: msg.receiver_id === user.id && !msg.is_read ? 1 : 0,\n            conversation_type: (msg.conversation_type as 'prospect' | 'applicant' | 'tenant' | 'landlord_support') || 'prospect'\n          });\n        } else {\n          const conv = conversationMap.get(partnerId)!;\n          if (msg.receiver_id === user.id && !msg.is_read) {\n            conv.unread_count++;\n          }\n        }\n      });\n\n      // Fetch user profiles\n      if (userIds.size > 0) {\n        const { data: profilesData } = await supabase\n          .from('profiles')\n          .select('id, full_name')\n          .in('id', Array.from(userIds));\n\n        const profileMap: Record<string, UserProfile> = {};\n        profilesData?.forEach(profile => {\n          profileMap[profile.id] = profile;\n        });\n        setProfiles(profileMap);\n\n        // Update conversation names\n        conversationMap.forEach((conv, key) => {\n          conv.user_name = profileMap[key]?.full_name || 'Utilisateur inconnu';\n        });\n      }\n\n      // Determine conversation type for each conversation using RPC\n      for (const [partnerId, conv] of conversationMap) {\n        const { data: convType } = await supabase.rpc('get_conversation_type', {\n          p_sender_id: user.id,\n          p_receiver_id: partnerId,\n          p_property_id: null\n        });\n        \n        if (convType) {\n          conv.conversation_type = convType as 'prospect' | 'applicant' | 'tenant' | 'landlord_support';\n        }\n      }\n\n      setConversations(Array.from(conversationMap.values()));\n    } catch (error) {\n      logger.error('Failed to fetch conversations', { error, userId: user?.id });\n      toast({\n        title: 'Erreur',\n        description: 'Impossible de charger les conversations. Réessayez.',\n        variant: 'destructive'\n      });\n    } finally {\n      setLoading(false);\n      loadingCompleted.current = true;\n    }\n  };\n\n  const fetchMessages = async (partnerId: string) => {\n    if (!user) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .or(`and(sender_id.eq.${user.id},receiver_id.eq.${partnerId}),and(sender_id.eq.${partnerId},receiver_id.eq.${user.id})`)\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n      \n      // Parse attachments from JSON to proper type\n      const parsedMessages: MessageDisplay[] = (data || []).map(msg => {\n        let parsedAttachments: Attachment[] = [];\n        \n        if (msg.attachments) {\n          try {\n            if (typeof msg.attachments === 'string') {\n              parsedAttachments = JSON.parse(msg.attachments);\n            } else if (Array.isArray(msg.attachments)) {\n              parsedAttachments = msg.attachments as unknown as Attachment[];\n            }\n          } catch (e) {\n            logger.error('Failed to parse message attachments', { error: e, messageId: msg.id });\n          }\n        }\n        \n        return {\n          id: msg.id,\n          sender_id: msg.sender_id,\n          receiver_id: msg.receiver_id,\n          content: msg.content,\n          is_read: msg.is_read,\n          created_at: msg.created_at,\n          attachments: parsedAttachments\n        };\n      });\n      \n      setMessages(parsedMessages);\n    } catch (error) {\n      logger.error('Failed to fetch messages', { error, partnerId });\n    }\n  };\n\n  const markAsRead = async (partnerId: string) => {\n    if (!user) return;\n\n    try {\n      await supabase\n        .from('messages')\n        .update({ is_read: true })\n        .eq('sender_id', partnerId)\n        .eq('receiver_id', user.id)\n        .eq('is_read', false);\n    } catch (error) {\n      logger.error('Failed to mark messages as read', { error, partnerId });\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!user || !selectedConversation || (!newMessage.trim() && attachments.length === 0)) return;\n\n    try {\n      const messageData: {\n        sender_id: string;\n        receiver_id: string;\n        content: string;\n        attachments?: string;\n      } = {\n        sender_id: user.id,\n        receiver_id: selectedConversation,\n        content: newMessage.trim() || '(Pièce(s) jointe(s))'\n      };\n      \n      if (attachments.length > 0) {\n        messageData.attachments = JSON.stringify(attachments);\n      }\n\n      const { error } = await supabase\n        .from('messages')\n        .insert([messageData]);\n\n      if (error) throw error;\n\n      setNewMessage('');\n      setAttachments([]);\n\n      toast({\n        title: \"Message envoyé\",\n        description: \"Votre message a été envoyé avec succès\"\n      });\n    } catch (error) {\n      logger.error('Failed to send message', { error, receiverId: selectedConversation });\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer le message\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.startsWith('image/')) return <ImageIcon className=\"h-4 w-4\" />;\n    if (type.includes('pdf')) return <FileText className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes < 1024) return bytes + ' B';\n    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';\n    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';\n  };\n\n  const getConversationBadge = (type: 'prospect' | 'applicant' | 'tenant' | 'landlord_support') => {\n    const configs = {\n      prospect: { emoji: '🟡', label: 'Prospect', className: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' },\n      applicant: { emoji: '🟠', label: 'Candidat', className: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400' },\n      tenant: { emoji: '🟢', label: 'Locataire', className: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' },\n      landlord_support: { emoji: '🔵', label: 'Support', className: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400' }\n    };\n    \n    const config = configs[type];\n    return (\n      <Badge className={`${config.className} text-xs`}>\n        <span className=\"mr-1\">{config.emoji}</span>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      <main className=\"flex-1 container mx-auto px-4 py-8 pt-24\">\n        <div className=\"max-w-7xl mx-auto\">\n          <DynamicBreadcrumb />\n          <h1 className=\"text-3xl font-bold mb-6\">Messages</h1>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 h-[600px]\">\n            {/* Conversations list */}\n            <Card className=\"md:col-span-1\">\n              <CardHeader>\n                <CardTitle>Conversations</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <ScrollArea className=\"h-[500px]\">\n                  {loading ? (\n                    <div className=\"p-4 text-center text-muted-foreground\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n                      <p>Chargement des conversations...</p>\n                    </div>\n                  ) : conversations.length === 0 ? (\n                    <div className=\"p-4 text-center text-muted-foreground\">\n                      <MessageCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                      <p>Aucune conversation</p>\n                      <p className=\"text-xs mt-2\">Commencez à discuter avec un propriétaire</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-1\">\n                      {conversations.map(conv => (\n                        <button\n                          key={conv.id}\n                          onClick={() => setSelectedConversation(conv.id)}\n                          className={`w-full p-4 text-left hover:bg-muted/50 transition-colors border-l-4 ${\n                            selectedConversation === conv.id\n                              ? 'border-primary bg-muted/50'\n                              : 'border-transparent'\n                          }`}\n                        >\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarFallback>\n                        {conv.user_name.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between gap-2\">\n                        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                          <p className=\"font-medium truncate\">{conv.user_name}</p>\n                          {getConversationBadge(conv.conversation_type)}\n                        </div>\n                        {conv.unread_count > 0 && (\n                          <span className=\"bg-primary text-primary-foreground text-xs px-2 py-0.5 rounded-full flex-shrink-0\">\n                            {conv.unread_count}\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground truncate\">\n                        {conv.last_message}\n                      </p>\n                    </div>\n                  </div>\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n              </CardContent>\n            </Card>\n\n            {/* Messages */}\n            <Card className=\"md:col-span-2\">\n              {selectedConversation && profiles[selectedConversation] ? (\n                <>\n                  <CardHeader>\n                    <CardTitle>\n                      {profiles[selectedConversation].full_name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <ScrollArea className=\"h-[320px] pr-4\">\n                      <div className=\"space-y-4\">\n                        {messages.map(msg => (\n                          <div\n                            key={msg.id}\n                            className={`flex ${\n                              msg.sender_id === user?.id ? 'justify-end' : 'justify-start'\n                            }`}\n                          >\n                            <div\n                              className={`max-w-[70%] rounded-lg p-3 ${\n                                msg.sender_id === user?.id\n                                  ? 'bg-primary text-primary-foreground'\n                                  : 'bg-muted'\n                              }`}\n                            >\n                              <p className=\"text-sm\">{msg.content}</p>\n                              \n                              {msg.attachments && msg.attachments.length > 0 && (\n                                <div className=\"mt-2 space-y-1\">\n                                  {msg.attachments.map((file, idx) => (\n                                    <a\n                                      key={idx}\n                                      href={file.url}\n                                      target=\"_blank\"\n                                      rel=\"noopener noreferrer\"\n                                      className=\"flex items-center gap-2 text-xs hover:underline p-2 rounded bg-background/10\"\n                                    >\n                                      {getFileIcon(file.type)}\n                                      <span className=\"truncate\">{file.name}</span>\n                                      <Download className=\"h-3 w-3 ml-auto flex-shrink-0\" />\n                                    </a>\n                                  ))}\n                                </div>\n                              )}\n\n                              <p className=\"text-xs opacity-70 mt-1\">\n                                {new Date(msg.created_at).toLocaleTimeString('fr-FR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                        <div ref={scrollRef} />\n                      </div>\n                    </ScrollArea>\n\n                    <div className=\"space-y-3 border-t pt-3\">\n                      <MessageTemplates onUseTemplate={(content) => setNewMessage(content)} />\n                      \n                      <AttachmentUpload \n                        attachments={attachments}\n                        onAttachmentsChange={setAttachments}\n                      />\n\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Écrivez votre message...\"\n                          value={newMessage}\n                          onChange={(e) => setNewMessage(e.target.value)}\n                          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && sendMessage()}\n                        />\n                        <Button onClick={sendMessage} size=\"icon\">\n                          <Send className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </>\n              ) : (\n                <div className=\"h-full flex items-center justify-center text-muted-foreground\">\n                  <div className=\"text-center\">\n                    <MessageCircle className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                    <p>Sélectionnez une conversation</p>\n                  </div>\n                </div>\n              )}\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Messages;\n"],"names":["MessageTemplates","onUseTemplate","user","useAuth","templates","setTemplates","useState","open","setOpen","editingTemplate","setEditingTemplate","templateName","setTemplateName","templateContent","setTemplateContent","useEffect","fetchTemplates","data","error","supabase","logger","saveTemplate","toast","resetForm","deleteTemplate","id","openEditDialog","template","jsxs","jsx","FileText","Dialog","DialogTrigger","Button","Plus","DialogContent","DialogHeader","DialogTitle","Input","e","Textarea","ScrollArea","Card","CardContent","Edit","Trash2","AttachmentUpload","attachments","onAttachmentsChange","uploading","setUploading","handleFileSelect","files","uploadedFiles","file","fileExt","fileName","uploadError","publicUrl","removeAttachment","index","_","i","getFileIcon","type","ImageIcon","File","formatFileSize","bytes","X","_a","Paperclip","Messages","searchParams","useSearchParams","recipientId","conversations","setConversations","selectedConversation","setSelectedConversation","messages","setMessages","newMessage","setNewMessage","setAttachments","loading","setLoading","profiles","setProfiles","scrollRef","useRef","loadingCompleted","fetchConversations","timeoutId","fetchMessages","markAsRead","profile","prev","channel","payload","messagesData","conversationMap","userIds","msg","partnerId","conv","profilesData","profileMap","key","convType","parsedMessages","parsedAttachments","sendMessage","messageData","getConversationBadge","config","Badge","Navbar","DynamicBreadcrumb","CardHeader","CardTitle","MessageCircle","Avatar","AvatarFallback","Fragment","idx","Download","content","Send","Footer"],"mappings":"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"}